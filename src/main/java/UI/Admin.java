/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.json.JSONArray;
import org.json.JSONObject;
import pc_builder.Device;
import pc_builder.DeviceStorage;
import pc_builder.User;
import pc_builder.UserStorage;

/**
 *
 * @author Admin
 */
public class Admin extends javax.swing.JFrame {

    /**
     * Creates new form Admin
     */
    private Login parent;
    private int mode = 0;
    
    public void user_getTable() {
        
        DefaultTableModel tabelModel = (DefaultTableModel)UserTable.getModel();
        tabelModel.setRowCount(0);
        
        JSONArray users = UserStorage.loadItems();
        for (int i = 1; i < users.length(); i++) {
            JSONObject user = users.getJSONObject(i);
            String data[] = {user.getString("id"), user.getString("username"), user.getString("name"), user.getString("email")};
            tabelModel.addRow(data);
        }
        
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tabelModel);
        UserTable.setRowSorter(sorter);
        
        sorter.setRowFilter(new RowFilter<>() {
        @Override
        public boolean include(Entry<? extends DefaultTableModel, ? extends Integer> entry) {
            String name = entry.getStringValue(SortByCombo.getSelectedIndex());
            return name.toLowerCase().contains(SortByTextField.getText().toLowerCase());
        }
        });
    }
    
    public void device_getTable() {
        
        DefaultTableModel tabelModel = (DefaultTableModel)DeviceTable.getModel();
        tabelModel.setRowCount(0);
        
        JSONArray devices = DeviceStorage.loadItems();
        for (int i = 0; i < devices.length(); i++) {
            JSONObject device = devices.getJSONObject(i);
            String data[] = {device.getString("id"), device.getString("name"), device.getString("type"), device.getString("brand")};
            tabelModel.addRow(data);
        }
        
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tabelModel);
        DeviceTable.setRowSorter(sorter);
        
        sorter.setRowFilter(new RowFilter<>() {
        @Override
        public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Integer> entry) {
            String name = entry.getStringValue(SortByCombo1.getSelectedIndex());
            return name.toLowerCase().contains(SortByTextField1.getText().toLowerCase());
        }
        });
        
    }
    
    public Admin(Login parent) {
        this.parent = parent;
        initComponents();
        user_getTable();
        device_getTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Buttons = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        ButtonsPanel = new javax.swing.JPanel();
        UsersButton = new javax.swing.JButton();
        DevicesButton = new javax.swing.JButton();
        UserEditor = new javax.swing.JPanel();
        User_Tittle = new javax.swing.JLabel();
        ContentList = new javax.swing.JPanel();
        ListTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UserTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        EditUser = new javax.swing.JButton();
        ImportUserDataButton = new javax.swing.JButton();
        ExportUserDataButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        SortByCombo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        SortByTextField = new javax.swing.JTextField();
        FilterUser = new javax.swing.JButton();
        LogOutButton = new javax.swing.JButton();
        DeviceEditor = new javax.swing.JPanel();
        User_Tittle1 = new javax.swing.JLabel();
        ContentList1 = new javax.swing.JPanel();
        ListTable1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        DeviceTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        EditDevice = new javax.swing.JButton();
        ImportDeviceDataButton = new javax.swing.JButton();
        ExportDeviceDataButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        SortByCombo1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        SortByTextField1 = new javax.swing.JTextField();
        FilterDevice = new javax.swing.JButton();
        AddDevice = new javax.swing.JButton();
        DuplicateDevice = new javax.swing.JButton();
        DeleteDevice = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jBrandField = new javax.swing.JTextField();
        jTypeField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        Buttons.add(UsersButton);
        Buttons.add(DevicesButton);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin");

        jPanel1.setPreferredSize(new java.awt.Dimension(800, 500));
        jPanel1.setLayout(null);

        ButtonsPanel.setBackground(new java.awt.Color(153, 153, 255));
        ButtonsPanel.setPreferredSize(new java.awt.Dimension(800, 30));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5);
        flowLayout1.setAlignOnBaseline(true);
        ButtonsPanel.setLayout(flowLayout1);

        UsersButton.setBackground(new java.awt.Color(153, 153, 255));
        UsersButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        UsersButton.setForeground(new java.awt.Color(255, 255, 255));
        UsersButton.setText("Users");
        UsersButton.setBorder(null);
        UsersButton.setBorderPainted(false);
        UsersButton.setFocusable(false);
        UsersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsersButtonActionPerformed(evt);
            }
        });
        ButtonsPanel.add(UsersButton);

        DevicesButton.setBackground(new java.awt.Color(153, 153, 255));
        DevicesButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        DevicesButton.setForeground(new java.awt.Color(255, 255, 255));
        DevicesButton.setText("Devices");
        DevicesButton.setBorder(null);
        DevicesButton.setBorderPainted(false);
        DevicesButton.setFocusable(false);
        DevicesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DevicesButtonActionPerformed(evt);
            }
        });
        ButtonsPanel.add(DevicesButton);

        jPanel1.add(ButtonsPanel);
        ButtonsPanel.setBounds(0, 0, 720, 30);

        UserEditor.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        UserEditor.setPreferredSize(new java.awt.Dimension(800, 470));

        User_Tittle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        User_Tittle.setText("User manager");

        ListTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        UserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "Username", "Name", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        UserTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(UserTable);

        javax.swing.GroupLayout ListTableLayout = new javax.swing.GroupLayout(ListTable);
        ListTable.setLayout(ListTableLayout);
        ListTableLayout.setHorizontalGroup(
            ListTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                .addContainerGap())
        );
        ListTableLayout.setVerticalGroup(
            ListTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ContentListLayout = new javax.swing.GroupLayout(ContentList);
        ContentList.setLayout(ContentListLayout);
        ContentListLayout.setHorizontalGroup(
            ContentListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ListTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ContentListLayout.setVerticalGroup(
            ContentListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentListLayout.createSequentialGroup()
                .addComponent(ListTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 17, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(245, 245, 245));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        EditUser.setText("Edit");
        EditUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditUserActionPerformed(evt);
            }
        });

        ImportUserDataButton.setText("Import");
        ImportUserDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportUserDataButtonActionPerformed(evt);
            }
        });

        ExportUserDataButton.setText("Export");
        ExportUserDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportUserDataButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Sort By");

        SortByCombo.setBackground(new java.awt.Color(254, 254, 254));
        SortByCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Username", "Name", "Email" }));
        SortByCombo.setFocusable(false);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Filter");

        FilterUser.setText("Filter");
        FilterUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(ImportUserDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExportUserDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(EditUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FilterUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SortByTextField)
                            .addComponent(SortByCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(SortByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(SortByTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FilterUser, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 208, Short.MAX_VALUE)
                .addComponent(EditUser, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ImportUserDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExportUserDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout UserEditorLayout = new javax.swing.GroupLayout(UserEditor);
        UserEditor.setLayout(UserEditorLayout);
        UserEditorLayout.setHorizontalGroup(
            UserEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserEditorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(User_Tittle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(UserEditorLayout.createSequentialGroup()
                .addComponent(ContentList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        UserEditorLayout.setVerticalGroup(
            UserEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserEditorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(User_Tittle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ContentList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel1.add(UserEditor);
        UserEditor.setBounds(0, 30, 800, 530);

        LogOutButton.setBackground(new java.awt.Color(153, 153, 255));
        LogOutButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LogOutButton.setForeground(new java.awt.Color(255, 255, 255));
        LogOutButton.setText("Log Out");
        LogOutButton.setBorder(null);
        LogOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutButtonActionPerformed(evt);
            }
        });
        jPanel1.add(LogOutButton);
        LogOutButton.setBounds(720, 0, 80, 30);

        DeviceEditor.setVisible(false);
        DeviceEditor.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        DeviceEditor.setPreferredSize(new java.awt.Dimension(800, 470));

        User_Tittle1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        User_Tittle1.setText("Device manager");

        ListTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        DeviceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Type", "Brand"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DeviceTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(DeviceTable);

        javax.swing.GroupLayout ListTable1Layout = new javax.swing.GroupLayout(ListTable1);
        ListTable1.setLayout(ListTable1Layout);
        ListTable1Layout.setHorizontalGroup(
            ListTable1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListTable1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                .addContainerGap())
        );
        ListTable1Layout.setVerticalGroup(
            ListTable1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListTable1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ContentList1Layout = new javax.swing.GroupLayout(ContentList1);
        ContentList1.setLayout(ContentList1Layout);
        ContentList1Layout.setHorizontalGroup(
            ContentList1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentList1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ListTable1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ContentList1Layout.setVerticalGroup(
            ContentList1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentList1Layout.createSequentialGroup()
                .addComponent(ListTable1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 17, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(245, 245, 245));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        EditDevice.setText("Edit");
        EditDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditDeviceActionPerformed(evt);
            }
        });

        ImportDeviceDataButton.setText("Import");
        ImportDeviceDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportDeviceDataButtonActionPerformed(evt);
            }
        });

        ExportDeviceDataButton.setText("Export");
        ExportDeviceDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportDeviceDataButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Sort By");

        SortByCombo1.setBackground(new java.awt.Color(254, 254, 254));
        SortByCombo1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Name", "Type", "Brand" }));
        SortByCombo1.setFocusable(false);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Filter");

        FilterDevice.setText("Filter");
        FilterDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterDeviceActionPerformed(evt);
            }
        });

        AddDevice.setText("Add");
        AddDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddDeviceActionPerformed(evt);
            }
        });

        DuplicateDevice.setText("Duplicate");
        DuplicateDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DuplicateDeviceActionPerformed(evt);
            }
        });

        DeleteDevice.setText("Delete");
        DeleteDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteDeviceActionPerformed(evt);
            }
        });

        jLabel5.setText("Brand");

        jBrandField.setText("N/A");

        jTypeField.setText("N/A");

        jLabel6.setText("Type");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(ImportDeviceDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExportDeviceDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(EditDevice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FilterDevice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SortByTextField1)
                            .addComponent(SortByCombo1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(AddDevice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DuplicateDevice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DeleteDevice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTypeField)
                            .addComponent(jBrandField))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(SortByCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(SortByTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FilterDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTypeField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBrandField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(DuplicateDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ImportDeviceDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExportDeviceDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout DeviceEditorLayout = new javax.swing.GroupLayout(DeviceEditor);
        DeviceEditor.setLayout(DeviceEditorLayout);
        DeviceEditorLayout.setHorizontalGroup(
            DeviceEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeviceEditorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(User_Tittle1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(DeviceEditorLayout.createSequentialGroup()
                .addComponent(ContentList1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        DeviceEditorLayout.setVerticalGroup(
            DeviceEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeviceEditorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(User_Tittle1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DeviceEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ContentList1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        jPanel1.add(DeviceEditor);
        DeviceEditor.setBounds(0, 30, 800, 530);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ImportUserDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportUserDataButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select JSON file");

        // Checking for user selected
        int result = fileChooser.showOpenDialog(null);  // showOpenDialog
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String filePath = selectedFile.getAbsolutePath();

            // Read JSON into JSONArray
            try {
                String content = new String(Files.readAllBytes(Paths.get(filePath)));  // Read content as string
                JSONArray jsonArray = new JSONArray(content);  // turn String into JSONArray
                UserStorage.saveItems(jsonArray);
            } catch (IOException e) {
                System.err.println("Error when reading file: " + e.getMessage());
            }
        } else {
            System.out.println("No file selected!");
        }
        
        user_getTable();
    }//GEN-LAST:event_ImportUserDataButtonActionPerformed

    private void LogOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutButtonActionPerformed
        // TODO add your handling code here:
        User.loadUsers(UserStorage.loadItems());
        Device.loadDevices(DeviceStorage.loadItems());
        parent.close();
    }//GEN-LAST:event_LogOutButtonActionPerformed

    private void FilterUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterUserActionPerformed
        // TODO add your handling code here:
        user_getTable();
    }//GEN-LAST:event_FilterUserActionPerformed

    private void ExportUserDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportUserDataButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select saved JSON file");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        // Show Dialog and check for result
        int result = fileChooser.showSaveDialog(null);

        // If user selected approved file
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedDirectory = fileChooser.getSelectedFile();
            String directoryPath = selectedDirectory.getAbsolutePath();

            // Link for JSON will be saved at
            String filePath = directoryPath + File.separator + "users_backup.json";

            // Copying JSON File
            try (FileWriter writer = new FileWriter(filePath)) {
                writer.write(UserStorage.loadItems().toString(4));  // Write JSON
                JOptionPane.showMessageDialog(null, "The data have been save at: " + filePath);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error while writing JSON: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "No available folder choosen!");
        }
    }//GEN-LAST:event_ExportUserDataButtonActionPerformed

    public void updateTable(String username, JSONObject newData) {
        if (mode == 0) {
            UserStorage.updateItem(username, newData);
            user_getTable();
        } else {
            DeviceStorage.updateItem(username, newData);
            device_getTable();
        }
    }
    
    public void updateUserData() {
        UserStorage.loadItems();
    }
    
    public void updateDeviceData() {
        DeviceStorage.loadItems();
    }
    
    private void EditUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditUserActionPerformed
        // TODO add your handling code here:
        if (UserTable.getSelectedRow()>=0) {
            String username = (String) UserTable.getValueAt(UserTable.getSelectedRow(), 1);
            ModifyData jframe = new ModifyData(this, UserStorage.getItem(username) , username);
            jframe.setLocationRelativeTo(null);
            jframe.setVisible(true);
        }
    }//GEN-LAST:event_EditUserActionPerformed

    private void EditDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditDeviceActionPerformed
        // TODO add your handling code here:
        if (DeviceTable.getSelectedRow()>=0) {
            String id = (String) DeviceTable.getValueAt(DeviceTable.getSelectedRow(), 0);
            ModifyData jframe = new ModifyData(this, DeviceStorage.getItem(id) , id);
            jframe.setLocationRelativeTo(null);
            jframe.setVisible(true);
        }
    }//GEN-LAST:event_EditDeviceActionPerformed

    private void ImportDeviceDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportDeviceDataButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select JSON file");

        // Checking for user selected
        int result = fileChooser.showOpenDialog(null);  // showOpenDialog
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String filePath = selectedFile.getAbsolutePath();

            // Read JSON into JSONArray
            try {
                String content = new String(Files.readAllBytes(Paths.get(filePath)));  // Read content as string
                JSONArray jsonArray = new JSONArray(content);  // turn String into JSONArray
                DeviceStorage.saveItems(jsonArray);
            } catch (IOException e) {
                System.err.println("Error when reading file: " + e.getMessage());
            }
        } else {
            System.out.println("No file selected!");
        }
        
        device_getTable();
    }//GEN-LAST:event_ImportDeviceDataButtonActionPerformed

    private void ExportDeviceDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportDeviceDataButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select saved JSON file");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        // Show Dialog and check for result
        int result = fileChooser.showSaveDialog(null);

        // If user selected approved file
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedDirectory = fileChooser.getSelectedFile();
            String directoryPath = selectedDirectory.getAbsolutePath();

            // Link for JSON will be saved at
            String filePath = directoryPath + File.separator + "devices_backup.json";

            // Copying JSON File
            try (FileWriter writer = new FileWriter(filePath)) {
                writer.write(DeviceStorage.loadItems().toString(4));  // Write JSON
                JOptionPane.showMessageDialog(null, "The data have been save at: " + filePath);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error while writing JSON: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "No available folder choosen!");
        }
    }//GEN-LAST:event_ExportDeviceDataButtonActionPerformed

    private void FilterDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterDeviceActionPerformed
        // TODO add your handling code here:
        device_getTable();
    }//GEN-LAST:event_FilterDeviceActionPerformed

    private void UsersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsersButtonActionPerformed
        // TODO add your handling code here:
        UserEditor.setVisible(true);
        DeviceEditor.setVisible(false);
        mode = 0;
    }//GEN-LAST:event_UsersButtonActionPerformed

    private void DevicesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DevicesButtonActionPerformed
        // TODO add your handling code here:
        UserEditor.setVisible(false);
        DeviceEditor.setVisible(true);
        mode = 1;
    }//GEN-LAST:event_DevicesButtonActionPerformed

    private void AddDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDeviceActionPerformed
        // TODO add your handling code here:
        JSONObject newDevice = DeviceStorage.Sample();
        newDevice.put("name", "N/A");
        newDevice.put("type", jTypeField.getText());
        newDevice.put("brand", jBrandField.getText());
        
        DeviceStorage.addItem(newDevice);
        device_getTable();
    }//GEN-LAST:event_AddDeviceActionPerformed

    private void DuplicateDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DuplicateDeviceActionPerformed
        // TODO add your handling code here:
        JSONObject clone = DeviceStorage.getItem((String) DeviceTable.getValueAt(DeviceTable.getSelectedRow(), 0));
        clone.put("id", DeviceStorage.Sample().get("id"));
        DeviceStorage.addItem(clone);
        device_getTable();
    }//GEN-LAST:event_DuplicateDeviceActionPerformed

    private void DeleteDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteDeviceActionPerformed
        // TODO add your handling code here:
        DeviceStorage.deleteItem((String) DeviceTable.getValueAt(DeviceTable.getSelectedRow(), 0));
        device_getTable();
    }//GEN-LAST:event_DeleteDeviceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddDevice;
    private javax.swing.ButtonGroup Buttons;
    private javax.swing.JPanel ButtonsPanel;
    private javax.swing.JPanel ContentList;
    private javax.swing.JPanel ContentList1;
    private javax.swing.JButton DeleteDevice;
    private javax.swing.JPanel DeviceEditor;
    private javax.swing.JTable DeviceTable;
    private javax.swing.JButton DevicesButton;
    private javax.swing.JButton DuplicateDevice;
    private javax.swing.JButton EditDevice;
    private javax.swing.JButton EditUser;
    private javax.swing.JButton ExportDeviceDataButton;
    private javax.swing.JButton ExportUserDataButton;
    private javax.swing.JButton FilterDevice;
    private javax.swing.JButton FilterUser;
    private javax.swing.JButton ImportDeviceDataButton;
    private javax.swing.JButton ImportUserDataButton;
    private javax.swing.JPanel ListTable;
    private javax.swing.JPanel ListTable1;
    private javax.swing.JButton LogOutButton;
    private javax.swing.JComboBox<String> SortByCombo;
    private javax.swing.JComboBox<String> SortByCombo1;
    private javax.swing.JTextField SortByTextField;
    private javax.swing.JTextField SortByTextField1;
    private javax.swing.JPanel UserEditor;
    private javax.swing.JTable UserTable;
    private javax.swing.JLabel User_Tittle;
    private javax.swing.JLabel User_Tittle1;
    private javax.swing.JButton UsersButton;
    private javax.swing.JTextField jBrandField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTypeField;
    // End of variables declaration//GEN-END:variables
}
